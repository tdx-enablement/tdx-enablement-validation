#!/bin/bash
# shellcheck disable=all
# shellcheck disable=SC2086
CURR_DIR=$(dirname $(realpath $0))
FORCE_RECREATE=false

GUEST_USER="tdx"
GUEST_PASSWORD="123456"
GUEST_HOSTNAME="tdx-guest"
KERNEL_VERSION=""

AUTH_FILE=""
VIR_SCRIPT_PRE=""
VIR_SCRIPT_PST=""
CUS_CLOUD_CONFIG=""
CUS_SCRIPT=""
DEBUG_MODE=false
TEST_SUITE=false

GUEST_REPO=""
LOCATION_ISO=""
LOCATION_QCOW2=""
GUEST_IMG="tdx-guest-rhel-9.qcow2"
SIZE="20G"

VIRT_NAME="setup-guest-rhel-9"
SIZE_ISO_IMAGE=20
KS_DIR="kickstart"
KS_EFI="base.ks"
KS_OS="rhel-9.ks"

ok() {
    echo -e "\e[1;32mSUCCESS: $*\e[0;0m"
}

error() {
    echo -e "\e[1;31mERROR: $*\e[0;0m"
    exit 1
}

warn() {
    echo -e "\e[1;33mWARN: $*\e[0;0m"
}

check_tool() {
    # shellcheck disable=SC2086
    [[ "$(command -v $1)" ]] || { error "$1 is not installed" 1>&2 ; }
}

usage() {
    cat <<EOM
Usage: $(basename "$0") [OPTION]...
Required
  -r <guest repo>           Specify the directory including guest packages, generated by build-repo.sh or remote repo
  -l                        Location of the iso file if the guest image is installed from it
  -q                        Location of the qcow2 file if the guest image is based on it
Test suite
  -t                        Install test suite
Optional
  -v <kernel version>       Specify the version of the guest kernel, like 6.2.16-mvp30v3+7-generic of
                            linux-image-unsigned-6.2.16-mvp30v3+7-generic. If the guest repo is remote,
                            the option is necessary. 
  -a                        Auth file that will be placed in /etc/apt/auth.conf.d
  -h                        Show this help
  -f                        Force to recreate the output image
  -n                        Guest host name, default is "tdx-guest"
  -u                        Guest user name, default is "tdx"
  -p                        Guest password, default is "123456"
  -s                        Specify the size of guest image, Optional suffixes
                            'k' or 'K' (kilobyte, 1024), 'M' (megabyte, 1024k), 'G' (gigabyte, 1024M),
                            'T' (terabyte, 1024G), 'P' (petabyte, 1024T) and 'E' (exabyte, 1024P)  are
                            supported. 'b' is ignored.
  -o <output file>          Specify the output file, default is tdx-guest-ubuntu-22.04.qcow2.
                            Please make sure the suffix is qcow2. Due to permission consideration,
                            the output file will be put into /tmp/<output file>.
  -b                        Debug Mode
                            - enable root login
Customization
  -i                        Customized script run by virt-customize before invoking cloud-init (the script is interpreted by /bin/sh)
  -d                        Customized script run by virt-customize after invoking cloud-init (the script is interpreted by /bin/sh)
  -g                        Customized cloud-config appended to the user-data
  -x                        Customized script appended to the user-data (running after all runcmd in cloud-config)
EOM
}

process_args() {
    while getopts "r:l:q:o:s:n:u:p:a:v:i:d:g:x:fhtb" option; do
        case "$option" in
        r) GUEST_REPO=$OPTARG ;;
        l) LOCATION_ISO=$OPTARG ;;
        q) LOCATION_QCOW2=$OPTARG ;;
        o) GUEST_IMG=$OPTARG ;;
        s) SIZE=$OPTARG ;;
        n) GUEST_HOSTNAME=$OPTARG ;;
        u) GUEST_USER=$OPTARG ;;
        p) GUEST_PASSWORD=$OPTARG ;;
        a) AUTH_FILE=$OPTARG ;;
        v) KERNEL_VERSION=$OPTARG ;;
        i) VIR_SCRIPT_PRE=$OPTARG ;;
        d) VIR_SCRIPT_PST=$OPTARG ;;
        g) CUS_CLOUD_CONFIG=$OPTARG ;;
        x) CUS_SCRIPT=$OPTARG ;;
        f) FORCE_RECREATE=true ;;
        t) TEST_SUITE=true ;;
        b) DEBUG_MODE=true ;;
        h)
            usage
            exit 0
            ;;
        *)
            echo "Invalid option '-$OPTARG'"
            usage
            exit 1
            ;;
        esac
    done

    echo "================================="
    echo "Guest image /tmp/${GUEST_IMG}"
    if [ -n "$LOCATION_ISO" ]; then
        echo "Built from ISO $LOCATION_ISO"
    fi
    if [ -n "$LOCATION_QCOW2" ]; then
        echo "Built from QCOW2 $LOCATION_QCOW2"
    fi
    echo "Guest package installed from ${GUEST_REPO}"
    echo "Force recreate:   ${FORCE_RECREATE}"
    echo "Test suite:       ${TEST_SUITE}" 
    echo "Debug mode:       ${DEBUG_MODE}" 
    echo "Kernel version:   ${KERNEL_VERSION}"
    echo "Size:             ${SIZE}"
    echo "Hostname:         ${GUEST_HOSTNAME}"
    echo "User:             ${GUEST_USER}"
    echo "Password:         ******"
    echo "================================="

    if [ -z "${LOCATION_ISO}" ] && [ -z "${LOCATION_QCOW2}" ]; then
        error "The guest image is created from a disk(iso) file or an existing image(qcow2) file, specify it by -l or -q"
    fi

    if [ -n "${LOCATION_ISO}" ]; then
        if [[ "${LOCATION_ISO}" != *.iso ]]; then
            error "The base disk should be iso format with the suffix .iso."
        fi
    else
        if [[ "${LOCATION_QCOW2}" != *.qcow2 ]]; then
            error "The base image should be qcow2 format with the suffix .qcow2."
        fi
    fi

    if [[ "${GUEST_IMG}" != *.qcow2 ]]; then
        error "The output file should be qcow2 format with the suffix .qcow2."
    fi

    if [[ -f "/tmp/${GUEST_IMG}" ]]; then
        if [[ "${FORCE_RECREATE}" != "true" ]]; then
            error "Guest image /tmp/${GUEST_IMG} already exist, please specify -f if want force to recreate"
        fi
    fi

    if [[ "${GUEST_REPO}" != 'http:'* ]] && [[ "${GUEST_REPO}" != 'https:'* ]] && [[ "${GUEST_REPO}" != 'ftp:'* ]];then 
        if [[ -z "${GUEST_REPO}" ]]; then
            error "No guest repository provided, skip to install TDX packages..."
        else
            if [[ ! -d "${GUEST_REPO}" ]]; then
                error "The guest repo directory ${GUEST_REPO} does not exists..."
            fi
        fi
    fi

    if [[ "$SIZE" != *'k' ]] && \
       [[ "$SIZE" != *'K' ]] && \
       [[ "$SIZE" != *'M' ]] && \
       [[ "$SIZE" != *'G' ]] && \
       [[ "$SIZE" != *'T' ]] && \
       [[ "$SIZE" != *'P' ]] && \
       [[ "$SIZE" != *'E' ]]; then
            error "The guest image size $SIZE is unsupported, use -h to corrent the format"
    fi
}


#==================== func create_pristine_image ====================

create_guest_image() {
    if [ -n "$LOCATION_QCOW2" ]; then
        cp "$LOCATION_QCOW2" "/tmp/$GUEST_IMG"
    else
        eval virt-install \
            --name ${VIRT_NAME} \
            --cpu host \
            --virt-type=kvm \
            --ram 16384 \
            --vcpus 8 \
            --os-type linux \
            --os-variant rhel9-unknown \
            --network bridge=virbr0 \
            --nographics \
            --disk="${GUEST_IMG}",bus=virtio,format=qcow2,size="${SIZE_ISO_IMAGE}" \
            --location="${LOCATION_ISO}" \
            --initrd-inject ${KS_DIR}/${KS_EFI} \
            --initrd-inject ${KS_DIR}/${KS_OS} \
            --extra-args="\"inst.ks=file:/${KS_EFI} console=ttyS0,115200\"" \
            --destroy-on-exit \
            --transient

        cp "${GUEST_IMG}" "/tmp/$GUEST_IMG"
    fi
}

config_guest_env() {
    virt-customize -a "/tmp/${GUEST_IMG}" \
        --copy-in /etc/environment:/etc
    ok "Copy host's environment file to guest for http_proxy"
}

create_pristine_image() {
    create_guest_image
    config_guest_env
}

#==================== func pre_cloud_init ====================

basic_image_prepare() {
    ARGS=""
    # guest repo
    if [[ "${GUEST_REPO}" != 'http:'* ]] && [[ "${GUEST_REPO}" != 'https:'* ]] && [[ "${GUEST_REPO}" != 'ftp:'* ]];then
        ARGS=$ARGS' --copy-in '${GUEST_REPO}':/srv/ '
    fi

    # copy in
    if [ -n "$ARGS" ]; then
        virt-customize -a "/tmp/${GUEST_IMG}" $ARGS
    fi
}

test_suite_prepare() {
    if [[ "$TEST_SUITE" == "false" ]]; then
        return
    fi

    # test data set
    mkdir -p ./download
    if [[ ! -f ./download/dien_bf16_pretrained_opt_model.pb ]]; then
        wget -P ./download https://storage.googleapis.com/intel-optimized-tensorflow/models/v2_5_0/dien_bf16_pretrained_opt_model.pb 
    fi
    if [[ ! -f ./download/dien_fp32_static_rnn_graph.pb ]]; then
        wget -P ./download https://storage.googleapis.com/intel-optimized-tensorflow/models/v2_5_0/dien_fp32_static_rnn_graph.pb 
    fi
    
    mkdir -p ./download/dien
    if [[ ! -f ./download/data.tar.gz ]]; then
        wget -P ./download https://zenodo.org/record/3463683/files/data.tar.gz
        tar -C ./download/ -jxvf ./download/data.tar.gz
        mv ./download/data/* ./download/dien
    fi

    if [[ ! -f ./download/data1.tar.gz ]]; then
        wget -P ./download https://zenodo.org/record/3463683/files/data1.tar.gz
        tar -C ./download/ -jxvf ./download/data1.tar.gz
        mv ./download/data1/* ./download/dien
    fi

    if [[ ! -f ./download/data2.tar.gz ]]; then
        wget -P ./download https://zenodo.org/record/3463683/files/data2.tar.gz
        tar -C ./download/ -jxvf ./download/data2.tar.gz
        mv ./download/data2/* ./download/dien
    fi
    
    if [[ ! -d ./download/models ]]; then
        git clone https://github.com/IntelAI/models.git -b v2.5.0 ./download/models
    fi
    
    virt-customize -a "/tmp/${GUEST_IMG}" \
        --copy-in ./download/dien_bf16_pretrained_opt_model.pb:/root \
        --copy-in ./download/dien_fp32_static_rnn_graph.pb:/root \
        --copy-in ./download/dien:/root \
        --copy-in ./download/models:/root 
}

pre_cloud_init() {
    # install cloud-init
    virt-customize -a "/tmp/${GUEST_IMG}" \
        --run ./cloud-init-data/init-scripts/add_repos.sh \
        --run-command "sed -i 's/GRUB_TIMEOUT=5/GRUB_TIMEOUT=0/g' /etc/default/grub && grub2-mkconfig -o /boot/grub2/grub.cfg"

        #
        #--run-command "dnf install -y cloud-init" \
   
    basic_image_prepare
    test_suite_prepare
    if [ -n "$VIR_SCRIPT_PRE" ]; then
        virt-customize -a "/tmp/${GUEST_IMG}" --run "$VIR_SCRIPT_PRE"
    fi
    ok "pre_cloud_init finish"
}

#==================== func cloud_init ====================

create_user_data() {
    GUEST_REPO_NAME=""
    guest_repo_source=""
    PREFFIX="kernel-"

    if [[ "${GUEST_REPO}" == 'http:'* ]] || [[ "${GUEST_REPO}" == 'https:'* ]] || [[ "${GUEST_REPO}" == 'ftp:'* ]]; then 
        GUEST_REPO_NAME=$(basename "$GUEST_REPO")
        guest_repo_source=${GUEST_REPO}
    else
        GUEST_REPO_NAME=$(basename $(realpath "$GUEST_REPO"))
        guest_repo_source='file:///srv/'$GUEST_REPO_NAME
        if [ -z "$KERNEL_VERSION" ]; then
	    
	    kernel=$(basename $(find "$GUEST_REPO/x86_64" -name "kernel-6*" | head -1))
	    kernel=${kernel%.x86_64.rpm}
            KERNEL_VERSION=${kernel#"$PREFFIX"}
        fi
    fi

    # basic cloud-config
    pkgs=" \"$PREFFIX$KERNEL_VERSION\" "

    yq "
    .user=\"$GUEST_USER\" |
    .password=\"$GUEST_PASSWORD\" | 
    .yum_repos.\"$GUEST_REPO_NAME.repo\".baseurl=\"$guest_repo_source\" |
    .yum_repos.\"$GUEST_REPO_NAME.repo\".gpgcheck=\"false\" |
    .packages += [ $pkgs ]
    " "$CURR_DIR"/cloud-init-data/user-data-basic/cloud-config-base-template.yaml \
    > "$CURR_DIR"/cloud-init-data/cloud-config-base.yaml

    ARGS=' -a ./cloud-init-data/cloud-config-base.yaml:cloud-config'

    # test suite cloud
    if [[ "$TEST_SUITE" == "true" ]]; then
        
        cp "$CURR_DIR"/cloud-init-data/user-data-customized/cloud-config-test-suite-template.yaml \
        "$CURR_DIR"/cloud-init-data/cloud-config-test-suite.yaml
        
        ARGS=$ARGS' -a ./cloud-init-data/cloud-config-test-suite.yaml:cloud-config'
	ARGS=$ARGS' -a ./cloud-init-data/init-scripts/basic-install-go1.20.7.sh:x-shellscript'
        ARGS=$ARGS' -a ./cloud-init-data/init-scripts/test-suite-docker-related.sh:x-shellscript'
    fi
    
    if [ -n "$CUS_CLOUD_CONFIG" ]; then
        ARGS=$ARGS' -a '$CUS_CLOUD_CONFIG':cloud-config'
    fi

    if [ -n "$CUS_SCRIPT" ]; then
        ARGS=$ARGS' -a '$CUS_SCRIPT':x-shellscript'
    fi

    cloud-init devel make-mime $ARGS > ./cloud-init-data/user-data
}


invoke_cloud_init() {
    # shellcheck disable=SC2164
    pushd "$CURR_DIR"/cloud-init-data
    [ -e /tmp/ciiso.iso ] && rm /tmp/ciiso.iso

    # configure the meta-dta
    cp meta-data.template meta-data

    cat <<EOT >> meta-data

local-hostname: $GUEST_HOSTNAME
EOT

    ok "Generate configuration for cloud-init..."
    genisoimage -output /tmp/ciiso.iso -volid cidata -joliet -rock user-data meta-data
    ok "Generate the cloud-init ISO image..."
    # shellcheck disable=SC2164
    popd

    virt-install --memory 4096 --vcpus 4 --name tdx-config-cloud-init \
        --disk /tmp/"$GUEST_IMG" \
        --disk /tmp/ciiso.iso,device=cdrom \
        --os-type Linux \
        --os-variant rhel9-unknown \
        --virt-type kvm \
        --graphics none \
        --import 
    ok "Complete cloud-init..."
    sleep 1

    virsh undefine tdx-config-cloud-init || true
}

cloud_init() {
    create_user_data
    invoke_cloud_init
    ok "cloud_init finish"
}

#==================== func pst_cloud_init ====================

pst_cloud_init() {
    virt-customize -a /tmp/"$GUEST_IMG" \
        --copy-in config/grub:/etc/default/ \
        --run-command 'grub2-editenv /boot/efi/EFI/redhat/grubenv create' \
        --run-command 'grub2-mkconfig -o /boot/efi/EFI/redhat/grub.cfg'
}

#==================== process start ====================

process_args "$@"

# 1.
create_pristine_image

# 2.
pre_cloud_init

# 3. 
cloud_init

# 4.
pst_cloud_init

if [ -n "$LOCATION_ISO" ]; then
   ok "The raw qcow image $(realpath $GUEST_IMG)"
fi

ok "Please get the output TDX guest image file at /tmp/${GUEST_IMG}"
